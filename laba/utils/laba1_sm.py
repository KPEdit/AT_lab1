# ex: set ro:
# DO NOT EDIT.
# generated by smc (http://smc.sourceforge.net/)
# from file : laba1.sm

from .import statemap


class LabaState(statemap.State):

    def Entry(self, fsm):
        pass

    def Exit(self, fsm):
        pass

    def asg(self, fsm):
        self.Default(fsm)

    def char(self, fsm):
        self.Default(fsm)

    def end(self, fsm):
        self.Default(fsm)

    def num(self, fsm):
        self.Default(fsm)

    def space(self, fsm):
        self.Default(fsm)

    def Default(self, fsm):
        msg = "\n\tState: %s\n\tTransition: %s" % (
            fsm.getState().getName(), fsm.getTransition())
        raise statemap.TransitionUndefinedException(msg)

class LabaMap_Default(LabaState):

    def char(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(LabaMap.Error)
        fsm.getState().Entry(fsm)


    def num(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(LabaMap.Error)
        fsm.getState().Entry(fsm)


    def end(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(LabaMap.Error)
        fsm.getState().Entry(fsm)


    def asg(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(LabaMap.Error)
        fsm.getState().Entry(fsm)


    def space(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(LabaMap.Error)
        fsm.getState().Entry(fsm)


class LabaMap_Start(LabaMap_Default):

    def num(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.addC()
        finally:
            fsm.setState(LabaMap.Line)
            fsm.getState().Entry(fsm)


class LabaMap_Line(LabaMap_Default):

    def num(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.addC()
        finally:
            fsm.setState(LabaMap.Line)
            fsm.getState().Entry(fsm)


    def space(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.saveLine()
        finally:
            fsm.setState(LabaMap.PreType)
            fsm.getState().Entry(fsm)


class LabaMap_PreType(LabaMap_Default):

    def asg(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.nullGuard() :
            fsm.getState().Exit(fsm)
            # No actions.
            pass
            fsm.setState(LabaMap.Error)
            fsm.getState().Entry(fsm)
        else:
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.saveName()
            finally:
                fsm.setState(LabaMap.ASG)
                fsm.getState().Entry(fsm)


    def char(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.nameGuard() :
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.addC()
            finally:
                fsm.setState(endState)
        else:
            LabaMap_Default.char(self, fsm)
        
    def end(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.nullGuard() :
            fsm.getState().Exit(fsm)
            # No actions.
            pass
            fsm.setState(LabaMap.Error)
            fsm.getState().Entry(fsm)
        else:
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.saveName()
            finally:
                fsm.setState(LabaMap.OK)
                fsm.getState().Entry(fsm)


    def num(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.nameGuard() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.addC()
            finally:
                fsm.setState(LabaMap.PreName)
                fsm.getState().Entry(fsm)
        else:
            LabaMap_Default.num(self, fsm)
        
    def space(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.typeGuard() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.saveType()
            finally:
                fsm.setState(LabaMap.PreName)
                fsm.getState().Entry(fsm)
        else:
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.saveName()
            finally:
                fsm.setState(LabaMap.PreAsg)
                fsm.getState().Entry(fsm)


class LabaMap_PreName(LabaMap_Default):

    def asg(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.saveName()
        finally:
            fsm.setState(LabaMap.ASG)
            fsm.getState().Entry(fsm)


    def char(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.nameGuard() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.addC()
            finally:
                fsm.setState(LabaMap.PreName)
                fsm.getState().Entry(fsm)
        else:
            LabaMap_Default.char(self, fsm)
        
    def end(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.saveName()
        finally:
            fsm.setState(LabaMap.OK)
            fsm.getState().Entry(fsm)


    def num(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.nameGuard() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.addC()
            finally:
                fsm.setState(LabaMap.PreName)
                fsm.getState().Entry(fsm)
        else:
            LabaMap_Default.num(self, fsm)
        
    def space(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.saveName()
        finally:
            fsm.setState(LabaMap.PreAsg)
            fsm.getState().Entry(fsm)


class LabaMap_PreAsg(LabaMap_Default):

    def asg(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(LabaMap.ASG)
        fsm.getState().Entry(fsm)


class LabaMap_ASG(LabaMap_Default):

    def char(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.nameGuard() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.addC()
            finally:
                fsm.setState(LabaMap.VarName)
                fsm.getState().Entry(fsm)
        else:
            LabaMap_Default.char(self, fsm)
        
    def num(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.addC()
        finally:
            fsm.setState(LabaMap.VarNum)
            fsm.getState().Entry(fsm)


    def space(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(LabaMap.PreVar)
        fsm.getState().Entry(fsm)


class LabaMap_PreVar(LabaMap_Default):

    def char(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.nameGuard() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.addC()
            finally:
                fsm.setState(LabaMap.VarName)
                fsm.getState().Entry(fsm)
        else:
            LabaMap_Default.char(self, fsm)
        
    def num(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.addC()
        finally:
            fsm.setState(LabaMap.VarNum)
            fsm.getState().Entry(fsm)


class LabaMap_VarNum(LabaMap_Default):

    def end(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(LabaMap.OK)
        fsm.getState().Entry(fsm)


    def num(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.addC()
        finally:
            fsm.setState(LabaMap.VarNum)
            fsm.getState().Entry(fsm)


class LabaMap_VarName(LabaMap_Default):

    def char(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.nameGuard() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.addC()
            finally:
                fsm.setState(LabaMap.VarName)
                fsm.getState().Entry(fsm)
        else:
            LabaMap_Default.char(self, fsm)
        
    def end(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(LabaMap.OK)
        fsm.getState().Entry(fsm)


    def num(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.nameGuard() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.addC()
            finally:
                fsm.setState(LabaMap.VarName)
                fsm.getState().Entry(fsm)
        else:
            LabaMap_Default.num(self, fsm)
        
class LabaMap_OK(LabaMap_Default):
    pass

class LabaMap_Error(LabaMap_Default):

    def asg(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(LabaMap.Error)
        fsm.getState().Entry(fsm)


    def char(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(LabaMap.Error)
        fsm.getState().Entry(fsm)


    def end(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(LabaMap.Error)
        fsm.getState().Entry(fsm)


    def num(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(LabaMap.Error)
        fsm.getState().Entry(fsm)


    def space(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(LabaMap.Error)
        fsm.getState().Entry(fsm)


class LabaMap(object):

    Start = LabaMap_Start('LabaMap.Start', 0)
    Line = LabaMap_Line('LabaMap.Line', 1)
    PreType = LabaMap_PreType('LabaMap.PreType', 2)
    PreName = LabaMap_PreName('LabaMap.PreName', 3)
    PreAsg = LabaMap_PreAsg('LabaMap.PreAsg', 4)
    ASG = LabaMap_ASG('LabaMap.ASG', 5)
    PreVar = LabaMap_PreVar('LabaMap.PreVar', 6)
    VarNum = LabaMap_VarNum('LabaMap.VarNum', 7)
    VarName = LabaMap_VarName('LabaMap.VarName', 8)
    OK = LabaMap_OK('LabaMap.OK', 9)
    Error = LabaMap_Error('LabaMap.Error', 10)
    Default = LabaMap_Default('LabaMap.Default', -1)

class Laba_sm(statemap.FSMContext):

    def __init__(self, owner):
        statemap.FSMContext.__init__(self, LabaMap.Start)
        self._owner = owner

    def __getattr__(self, attrib):
        def trans_sm(*arglist):
            self._transition = attrib
            getattr(self.getState(), attrib)(self, *arglist)
            self._transition = None
        return trans_sm

    def enterStartState(self):
        self._state.Entry(self)

    def getOwner(self):
        return self._owner

# Local variables:
#  buffer-read-only: t
# End:
